import 'package:flutter/material.dart';
import 'package:qr_flutter/qr_flutter.dart';
import 'dart:math';

void main() {
  runApp(const QrApp());
}
/*
A class to describe all features of QR-code object
 */
class MyQrCode {
  String textForQrCode;
  int version;
  int errorCorrectionLevel;
  Color backgroundColor;
  Color foregroundColor;
  double errorWidgetHeight;
  double errorWidgetWidth;
  String errorText;
  Container errorStateBuilder () {
    return Container(
      height: errorWidgetHeight,
      width: errorWidgetWidth,
      child: Text(
        errorText,
      ),
    );
  }
  //Constructor
  MyQrCode (
      this.textForQrCode,
      this.version,
      this.errorCorrectionLevel,
      this.backgroundColor,
      this.foregroundColor,
      this.errorWidgetHeight,
      this.errorWidgetWidth,
      this.errorText,
      );
}

class QrApp extends StatelessWidget {
  const QrApp({Key? key}) : super(key: key);

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'QR-coder',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'QR-coder'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}



class _MyHomePageState extends State<MyHomePage> {
  late TextEditingController _controller;//controller of text edit field
  /*Initializing QR-code for MyHomePage*/
  MyQrCode currentQrCode = MyQrCode(
      "Fuck all wars! Хуй всем войнам! 1921",//default textForQrCode
      7,//default version
      QrErrorCorrectLevel.H,//default errorCorrectLevel
      Colors.white,//default backgroundColor
      Colors.black,//default foregroundColor
      200.0,//default errorWidgetHeight
      200.0,//default errorWidgetWidth
      "Something's happened",//default errorText
  );

  @override
  void initState() {
    super.initState();
    _controller = TextEditingController();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Invoke "debug painting" (press "p" in the console, choose the
          // "Toggle Debug Paint" action from the Flutter Inspector in Android
          // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
          // to see the wireframe for each widget.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            /*
            Widget generating QR-code
            */
            QrImage(
              data: currentQrCode.textForQrCode,//QR-code message
              version: currentQrCode.version,//QR-code version
              errorCorrectionLevel: currentQrCode.errorCorrectionLevel,//Correction level
              //Get the optimal size for QR-code based on context
              size: 0.8 * min(
                MediaQuery.of(context).size.width,//Width of the context
                MediaQuery.of(context).size.height//Height of the context
              ),
              backgroundColor: currentQrCode.backgroundColor,//Background color of this QR-code
              foregroundColor: currentQrCode.foregroundColor,//Foreground color of this QR-code
              errorStateBuilder: (cxt, err) {
                return currentQrCode.errorStateBuilder();//Error widget generating
                },
              ),
            TextField(
              controller: _controller,
              onSubmitted: (String localStringForQrCode) async {
                currentQrCode.textForQrCode = localStringForQrCode;//updating QR-code string
                currentQrCode.errorWidgetHeight = 0.8 * MediaQuery.of(context).size.height;//updating QR-code error massage height
                currentQrCode.errorWidgetWidth = 0.8 * MediaQuery.of(context).size.width;//updating QR-code error message width
              },
            )
          ],
        ),
      ),
    );
  }
}
